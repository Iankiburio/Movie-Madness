{"ast":null,"code":"var _jsxFileName = \"/home/ian/coding/phase 2/group project/group-5/src/MovieSearch.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport './MovieMadness.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst renderSuggestionsContainer = ({\n  containerProps,\n  children\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ...containerProps,\n    className: \"suggestions-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"suggestions-list\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\nconst MovieSearch = ({\n  onSearch\n}) => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [showBackgroundImage, setShowBackgroundImage] = useState(true);\n  const handleSearch = async e => {\n    e.preventDefault();\n    setShowBackgroundImage(false); // Hide background image on search button press\n\n    try {\n      const API_KEY = 'ae57e943f23fd67a50f1579e4ed5e7c5';\n      const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchTerm}`);\n      const data = await response.json();\n      const newSuggestions = data.results.map(movie => ({\n        title: movie.title,\n        poster_path: movie.poster_path\n      }));\n      setSuggestions(newSuggestions);\n      onSearch(searchTerm); // Call onSearch with the searchTerm\n    } catch (error) {\n      console.error('Error fetching suggestions:', error);\n    }\n  };\n  const handleInputChange = (e, {\n    newValue\n  }) => {\n    setSearchTerm(newValue);\n  };\n  const handleSuggestionsFetchRequested = async ({\n    value\n  }) => {\n    try {\n      const API_KEY = 'ae57e943f23fd67a50f1579e4ed5e7c5';\n      const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${value}`);\n      const data = await response.json();\n      const newSuggestions = data.results.map(movie => ({\n        title: movie.title,\n        poster_path: movie.poster_path\n      }));\n      setSuggestions(newSuggestions);\n    } catch (error) {\n      console.error('Error fetching suggestions:', error);\n    }\n  };\n  const getSuggestionValue = suggestion => suggestion.title;\n  const inputProps = {\n    placeholder: 'Enter a movie title',\n    value: searchTerm,\n    onChange: handleInputChange\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center-search-bar\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearch,\n      className: \"search-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `search-input-container ${showBackgroundImage ? 'show-image' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(Autosuggest, {\n          suggestions: suggestions,\n          onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n          renderSuggestionsContainer: renderSuggestionsContainer,\n          getSuggestionValue: getSuggestionValue,\n          inputProps: inputProps,\n          suggestionsContainerProps: {\n            style: {\n              position: 'absolute',\n              maxHeight: '200px',\n              overflowY: 'auto',\n              zIndex: '2'\n            }\n          },\n          renderSuggestion: suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"suggestion-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"suggestion-image\",\n              src: `https://image.tmdb.org/t/p/w200${suggestion.poster_path}`,\n              alt: suggestion.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"suggestion-title\",\n              children: suggestion.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"search-button\",\n        children: \"Search \\uD83D\\uDD0E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieSearch, \"7Ib+1nX/HHrOGrhLPBCHr4yS/xE=\");\n_c = MovieSearch;\nexport default MovieSearch;\nvar _c;\n$RefreshReg$(_c, \"MovieSearch\");","map":{"version":3,"names":["React","useState","Autosuggest","jsxDEV","_jsxDEV","renderSuggestionsContainer","containerProps","children","className","fileName","_jsxFileName","lineNumber","columnNumber","MovieSearch","onSearch","_s","searchTerm","setSearchTerm","suggestions","setSuggestions","showBackgroundImage","setShowBackgroundImage","handleSearch","e","preventDefault","API_KEY","response","fetch","data","json","newSuggestions","results","map","movie","title","poster_path","error","console","handleInputChange","newValue","handleSuggestionsFetchRequested","value","getSuggestionValue","suggestion","inputProps","placeholder","onChange","onSubmit","onSuggestionsFetchRequested","suggestionsContainerProps","style","position","maxHeight","overflowY","zIndex","renderSuggestion","src","alt","type","length","_c","$RefreshReg$"],"sources":["/home/ian/coding/phase 2/group project/group-5/src/MovieSearch.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport './MovieMadness.css';\n\nconst renderSuggestionsContainer = ({ containerProps, children }) => {\n  return (\n    <div {...containerProps} className=\"suggestions-container\">\n      <div className=\"suggestions-list\">{children}</div>\n    </div>\n  );\n};\n\nconst MovieSearch = ({ onSearch }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [showBackgroundImage, setShowBackgroundImage] = useState(true);\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    setShowBackgroundImage(false); // Hide background image on search button press\n\n    try {\n      const API_KEY = 'ae57e943f23fd67a50f1579e4ed5e7c5';\n      const response = await fetch(\n        `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchTerm}`\n      );\n      const data = await response.json();\n\n      const newSuggestions = data.results.map((movie) => ({\n        title: movie.title,\n        poster_path: movie.poster_path,\n      }));\n\n      setSuggestions(newSuggestions);\n      onSearch(searchTerm); // Call onSearch with the searchTerm\n    } catch (error) {\n      console.error('Error fetching suggestions:', error);\n    }\n  };\n\n  const handleInputChange = (e, { newValue }) => {\n    setSearchTerm(newValue);\n  };\n\n  const handleSuggestionsFetchRequested = async ({ value }) => {\n    try {\n      const API_KEY = 'ae57e943f23fd67a50f1579e4ed5e7c5';\n      const response = await fetch(\n        `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${value}`\n      );\n      const data = await response.json();\n\n      const newSuggestions = data.results.map((movie) => ({\n        title: movie.title,\n        poster_path: movie.poster_path,\n      }));\n\n      setSuggestions(newSuggestions);\n    } catch (error) {\n      console.error('Error fetching suggestions:', error);\n    }\n  };\n\n  const getSuggestionValue = (suggestion) => suggestion.title;\n\n  const inputProps = {\n    placeholder: 'Enter a movie title',\n    value: searchTerm,\n    onChange: handleInputChange,\n  };\n\n  return (\n    <div className=\"center-search-bar\">\n      <form onSubmit={handleSearch} className=\"search-form\">\n        <div className={`search-input-container ${showBackgroundImage ? 'show-image' : ''}`}>\n          <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={handleSuggestionsFetchRequested}\n            renderSuggestionsContainer={renderSuggestionsContainer}\n            getSuggestionValue={getSuggestionValue}\n            inputProps={inputProps}\n            suggestionsContainerProps={{\n              style: {\n                position: 'absolute',\n                maxHeight: '200px',\n                overflowY: 'auto',\n                zIndex: '2',\n              },\n            }}\n            renderSuggestion={(suggestion) => (\n              <div className=\"suggestion-item\">\n                <img\n                  className=\"suggestion-image\"\n                  src={`https://image.tmdb.org/t/p/w200${suggestion.poster_path}`}\n                  alt={suggestion.title}\n                />\n                <span className=\"suggestion-title\">{suggestion.title}</span>\n              </div>\n            )}\n          />\n        </div>\n        <button type=\"submit\" className=\"search-button\">\n          Search 🔎\n        </button>\n      </form>\n      {suggestions.length > 0 && (\n        <div className=\"search-results\">\n          {/* Render the search results here */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MovieSearch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/ian/coding/phase 2/group project/group-5/src/MovieSearch.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport './MovieMadness.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst renderSuggestionsContainer = ({\n  containerProps,\n  children\n}) => {\n  const suggestions = (containerProps === null || containerProps === void 0 ? void 0 : containerProps.suggestions) || [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ...containerProps,\n    className: \"suggestions-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"suggestions-list\",\n      children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"suggestion-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://image.tmdb.org/t/p/w200${suggestion.poster_path}`,\n          alt: suggestion.title,\n          className: \"suggestion-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestion-title\",\n          children: suggestion.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\nconst MovieSearch = ({\n  onSearch\n}) => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const handleSearch = e => {\n    e.preventDefault();\n    onSearch(searchTerm);\n  };\n  const handleInputChange = (e, {\n    newValue\n  }) => {\n    setSearchTerm(newValue);\n  };\n  const handleSuggestionsFetchRequested = async ({\n    value\n  }) => {\n    try {\n      const API_KEY = 'ae57e943f23fd67a50f1579e4ed5e7c5';\n      const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${value}`);\n      const data = await response.json();\n      const newSuggestions = data.results.map(movie => ({\n        title: movie.title,\n        poster_path: movie.poster_path\n      }));\n      setSuggestions(newSuggestions);\n    } catch (error) {\n      console.error('Error fetching suggestions:', error);\n    }\n  };\n  const getSuggestionValue = suggestion => suggestion.title;\n  const inputProps = {\n    placeholder: 'Enter a movie title',\n    value: searchTerm,\n    onChange: handleInputChange\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Search Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearch,\n      children: [/*#__PURE__*/_jsxDEV(Autosuggest, {\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n        renderSuggestionsContainer: renderSuggestionsContainer,\n        getSuggestionValue: getSuggestionValue,\n        inputProps: inputProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieSearch, \"kgnh0ZOAM1eaBwKIEDM548+I1W4=\");\n_c = MovieSearch;\nexport default MovieSearch;\nvar _c;\n$RefreshReg$(_c, \"MovieSearch\");","map":{"version":3,"names":["React","useState","Autosuggest","jsxDEV","_jsxDEV","renderSuggestionsContainer","containerProps","children","suggestions","className","map","suggestion","index","src","poster_path","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","MovieSearch","onSearch","_s","searchTerm","setSearchTerm","setSuggestions","handleSearch","e","preventDefault","handleInputChange","newValue","handleSuggestionsFetchRequested","value","API_KEY","response","fetch","data","json","newSuggestions","results","movie","error","console","getSuggestionValue","inputProps","placeholder","onChange","onSubmit","onSuggestionsFetchRequested","type","_c","$RefreshReg$"],"sources":["/home/ian/coding/phase 2/group project/group-5/src/MovieSearch.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport './MovieMadness.css';\n\nconst renderSuggestionsContainer = ({ containerProps, children }) => {\n  const suggestions = containerProps?.suggestions || [];\n\n  return (\n    <div {...containerProps} className=\"suggestions-container\">\n      <div className=\"suggestions-list\">\n        {suggestions.map((suggestion, index) => (\n          <div key={index} className=\"suggestion-item\">\n            <img\n              src={`https://image.tmdb.org/t/p/w200${suggestion.poster_path}`}\n              alt={suggestion.title}\n              className=\"suggestion-image\"\n            />\n            <div className=\"suggestion-title\">{suggestion.title}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst MovieSearch = ({ onSearch }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    onSearch(searchTerm);\n  };\n\n  const handleInputChange = (e, { newValue }) => {\n    setSearchTerm(newValue);\n  };\n\n  const handleSuggestionsFetchRequested = async ({ value }) => {\n    try {\n      const API_KEY = 'ae57e943f23fd67a50f1579e4ed5e7c5';\n      const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${value}`);\n      const data = await response.json();\n\n      const newSuggestions = data.results.map((movie) => ({\n        title: movie.title,\n        poster_path: movie.poster_path,\n      }));\n\n      setSuggestions(newSuggestions);\n    } catch (error) {\n      console.error('Error fetching suggestions:', error);\n    }\n  };\n\n  const getSuggestionValue = (suggestion) => suggestion.title;\n\n  const inputProps = {\n    placeholder: 'Enter a movie title',\n    value: searchTerm,\n    onChange: handleInputChange,\n  };\n\n  return (\n    <div>\n      <h3>Search Movies</h3>\n      <form onSubmit={handleSearch}>\n        <Autosuggest\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={handleSuggestionsFetchRequested}\n          renderSuggestionsContainer={renderSuggestionsContainer}\n          getSuggestionValue={getSuggestionValue}\n          inputProps={inputProps}\n        />\n\n        <button type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n};\n\nexport default MovieSearch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}